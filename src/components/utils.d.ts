import { default as _ } from 'lodash';
import { DFWhole } from './DFViewerParts/DFWhole';
import { ColDef } from '@ag-grid-community/core';
export type setDFFunc = (newDf: DFWhole) => void;
export declare const requestDf: (url: string, setCallBack: setDFFunc) => Promise<void>;
export declare const sym: (symbolName: string) => {
    symbol: string;
};
export declare function replaceInArr<T>(arr: T[], old: T, subst: T): T[];
export declare function replaceAtIdx<T>(arr: T[], idx: number, subst: T): T[];
export declare function replaceAtKey<T>(obj: Record<string, T>, key: string, subst: T): Record<string, T>;
export declare const objWithoutNull: (obj: Record<string, string>, extraStrips?: string[]) => _.Dictionary<string>;
export declare const updateAtMatch: (cols: ColDef[], key: string, subst: Partial<ColDef>, negative: Partial<ColDef>) => {
    colId?: string;
    field?: string | undefined;
    type?: string | string[];
    cellDataType?: boolean | string;
    valueGetter?: string | import('@ag-grid-community/core').ValueGetterFunc<any, any> | undefined;
    valueFormatter?: string | import('@ag-grid-community/core').ValueFormatterFunc<any, any> | undefined;
    refData?: {
        [key: string]: string;
    };
    keyCreator?: ((params: import('@ag-grid-community/core').KeyCreatorParams<any, any>) => string) | undefined;
    equals?: ((valueA: any, valueB: any) => boolean) | undefined;
    tooltipField?: string | undefined;
    tooltipValueGetter?: ((params: import('@ag-grid-community/core').ITooltipParams<any, any, any>) => string | any) | undefined;
    checkboxSelection?: boolean | import('@ag-grid-community/core').CheckboxSelectionCallback<any, any> | undefined;
    showDisabledCheckboxes?: boolean;
    icons?: {
        [key: string]: ((...args: any[]) => any) | string;
    };
    suppressNavigable?: boolean | import('@ag-grid-community/core').SuppressNavigableCallback<any, any> | undefined;
    suppressKeyboardEvent?: ((params: import('@ag-grid-community/core').SuppressKeyboardEventParams<any, any>) => boolean) | undefined;
    suppressPaste?: boolean | import('@ag-grid-community/core').SuppressPasteCallback<any, any> | undefined;
    suppressFillHandle?: boolean;
    hide?: boolean;
    initialHide?: boolean;
    lockVisible?: boolean;
    lockPosition?: boolean | "left" | "right";
    suppressMovable?: boolean;
    useValueFormatterForExport?: boolean;
    editable?: boolean | import('@ag-grid-community/core').EditableCallback<any, any> | undefined;
    valueSetter?: string | import('@ag-grid-community/core').ValueSetterFunc<any, any> | undefined;
    valueParser?: string | import('@ag-grid-community/core').ValueParserFunc<any, any> | undefined;
    cellEditor?: any;
    cellEditorParams?: any;
    cellEditorSelector?: import('@ag-grid-community/core').CellEditorSelectorFunc<any, any> | undefined;
    singleClickEdit?: boolean;
    cellEditorPopup?: boolean;
    cellEditorPopupPosition?: "over" | "under";
    useValueParserForImport?: boolean;
    onCellValueChanged?: ((event: import('@ag-grid-community/core').NewValueParams<any, any>) => void) | undefined;
    onCellClicked?: ((event: import('@ag-grid-community/core').CellClickedEvent<any, any>) => void) | undefined;
    onCellDoubleClicked?: ((event: import('@ag-grid-community/core').CellDoubleClickedEvent<any, any>) => void) | undefined;
    onCellContextMenu?: ((event: import('@ag-grid-community/core').CellContextMenuEvent<any, any>) => void) | undefined;
    getQuickFilterText?: ((params: import('@ag-grid-community/core').GetQuickFilterTextParams<any, any>) => string) | undefined;
    filterValueGetter?: string | import('@ag-grid-community/core').ValueGetterFunc<any, any> | undefined;
    floatingFilter?: boolean;
    suppressFloatingFilterButton?: boolean;
    headerComponent?: any;
    headerComponentParams?: any;
    menuTabs?: import('@ag-grid-community/core').ColumnMenuTab[];
    columnChooserParams?: import('@ag-grid-community/core').ColumnChooserParams;
    columnsMenuParams?: import('@ag-grid-community/core').ColumnsMenuParams;
    suppressMenu?: boolean;
    suppressHeaderMenuButton?: boolean;
    suppressHeaderFilterButton?: boolean;
    mainMenuItems?: (string | import('@ag-grid-community/core').MenuItemDef<any, any>)[] | import('@ag-grid-community/core').GetMainMenuItems<any, any> | undefined;
    contextMenuItems?: (string | import('@ag-grid-community/core').MenuItemDef<any, any>)[] | import('@ag-grid-community/core').GetContextMenuItems<any, any> | undefined;
    headerCheckboxSelection?: boolean | import('@ag-grid-community/core').HeaderCheckboxSelectionCallback<any, any> | undefined;
    headerCheckboxSelectionFilteredOnly?: boolean;
    headerCheckboxSelectionCurrentPageOnly?: boolean;
    chartDataType?: "category" | "series" | "time" | "excluded";
    pinned?: boolean | "left" | "right" | null;
    initialPinned?: boolean | "left" | "right";
    lockPinned?: boolean;
    pivot?: boolean;
    initialPivot?: boolean;
    pivotIndex?: number | null;
    initialPivotIndex?: number;
    pivotComparator?: (valueA: string, valueB: string) => number;
    enablePivot?: boolean;
    cellStyle?: import('@ag-grid-community/core').CellStyle | import('@ag-grid-community/core').CellStyleFunc<any, any> | undefined;
    cellClass?: string | string[] | import('@ag-grid-community/core').CellClassFunc<any, any> | undefined;
    cellClassRules?: import('@ag-grid-community/core').CellClassRules<any, any> | undefined;
    cellRenderer?: any;
    cellRendererParams?: any;
    cellRendererSelector?: import('@ag-grid-community/core').CellRendererSelectorFunc<any, any> | undefined;
    loadingCellRenderer?: any;
    loadingCellRendererParams?: any;
    loadingCellRendererSelector?: import('@ag-grid-community/core').CellRendererSelectorFunc<any, any> | undefined;
    autoHeight?: boolean;
    wrapText?: boolean;
    enableCellChangeFlash?: boolean;
    suppressCellFlash?: boolean;
    rowDrag?: boolean | import('@ag-grid-community/core').RowDragCallback<any, any> | undefined;
    rowDragText?: (params: import('@ag-grid-community/core').IRowDragItem, dragItemCount: number) => string;
    dndSource?: boolean | import('@ag-grid-community/core').DndSourceCallback<any, any> | undefined;
    dndSourceOnRowDrag?: ((params: import('@ag-grid-community/core').DndSourceOnRowDragParams<any>) => void) | undefined;
    rowGroup?: boolean;
    initialRowGroup?: boolean;
    rowGroupIndex?: number | null;
    initialRowGroupIndex?: number;
    enableRowGroup?: boolean;
    enableValue?: boolean;
    aggFunc?: string | import('@ag-grid-community/core').IAggFunc<any, any> | null | undefined;
    initialAggFunc?: string | import('@ag-grid-community/core').IAggFunc<any, any> | undefined;
    defaultAggFunc?: string;
    allowedAggFuncs?: string[];
    showRowGroup?: string | boolean;
    sortable?: boolean;
    sort?: import('@ag-grid-community/core').SortDirection;
    initialSort?: import('@ag-grid-community/core').SortDirection;
    sortIndex?: number | null;
    initialSortIndex?: number;
    sortingOrder?: import('@ag-grid-community/core').SortDirection[];
    comparator?: ((valueA: any, valueB: any, nodeA: import('@ag-grid-community/core').IRowNode<any>, nodeB: import('@ag-grid-community/core').IRowNode<any>, isDescending: boolean) => number) | undefined;
    unSortIcon?: boolean;
    colSpan?: ((params: import('@ag-grid-community/core').ColSpanParams<any, any>) => number) | undefined;
    rowSpan?: ((params: import('@ag-grid-community/core').RowSpanParams<any, any>) => number) | undefined;
    width?: number;
    initialWidth?: number;
    minWidth?: number;
    maxWidth?: number;
    flex?: number;
    initialFlex?: number;
    resizable?: boolean;
    suppressSizeToFit?: boolean;
    suppressAutoSize?: boolean;
    pivotValueColumn?: import('@ag-grid-community/core').Column | null;
    pivotTotalColumnIds?: string[];
    suppressSpanHeaderHeight?: boolean;
    headerName?: string;
    headerValueGetter?: string | import('@ag-grid-community/core').HeaderValueGetterFunc<any, any> | undefined;
    headerTooltip?: string;
    headerClass?: import('@ag-grid-community/core').HeaderClass<any, any> | undefined;
    suppressHeaderKeyboardEvent?: ((params: import('@ag-grid-community/core').SuppressHeaderKeyboardEventParams<any, any>) => boolean) | undefined;
    columnGroupShow?: import('@ag-grid-community/core').ColumnGroupShowType;
    toolPanelClass?: import('@ag-grid-community/core').ToolPanelClass<any, any> | undefined;
    suppressColumnsToolPanel?: boolean;
    suppressFiltersToolPanel?: boolean;
    tooltipComponent?: any;
    tooltipComponentParams?: any;
    pivotKeys?: string[];
    cellAriaRole?: string;
    context?: any;
    wrapHeaderText?: boolean;
    autoHeaderHeight?: boolean;
    suppressHeaderContextMenu?: boolean;
    filter?: any;
    filterParams?: any;
    floatingFilterComponent?: any;
    floatingFilterComponentParams?: any;
}[];
export declare const replaceAtMatch: (cols: ColDef[], key: string, subst: Partial<ColDef>) => {
    colId?: string;
    field?: string | undefined;
    type?: string | string[];
    cellDataType?: boolean | string;
    valueGetter?: string | import('@ag-grid-community/core').ValueGetterFunc<any, any> | undefined;
    valueFormatter?: string | import('@ag-grid-community/core').ValueFormatterFunc<any, any> | undefined;
    refData?: {
        [key: string]: string;
    };
    keyCreator?: ((params: import('@ag-grid-community/core').KeyCreatorParams<any, any>) => string) | undefined;
    equals?: ((valueA: any, valueB: any) => boolean) | undefined;
    tooltipField?: string | undefined;
    tooltipValueGetter?: ((params: import('@ag-grid-community/core').ITooltipParams<any, any, any>) => string | any) | undefined;
    checkboxSelection?: boolean | import('@ag-grid-community/core').CheckboxSelectionCallback<any, any> | undefined;
    showDisabledCheckboxes?: boolean;
    icons?: {
        [key: string]: ((...args: any[]) => any) | string;
    };
    suppressNavigable?: boolean | import('@ag-grid-community/core').SuppressNavigableCallback<any, any> | undefined;
    suppressKeyboardEvent?: ((params: import('@ag-grid-community/core').SuppressKeyboardEventParams<any, any>) => boolean) | undefined;
    suppressPaste?: boolean | import('@ag-grid-community/core').SuppressPasteCallback<any, any> | undefined;
    suppressFillHandle?: boolean;
    hide?: boolean;
    initialHide?: boolean;
    lockVisible?: boolean;
    lockPosition?: boolean | "left" | "right";
    suppressMovable?: boolean;
    useValueFormatterForExport?: boolean;
    editable?: boolean | import('@ag-grid-community/core').EditableCallback<any, any> | undefined;
    valueSetter?: string | import('@ag-grid-community/core').ValueSetterFunc<any, any> | undefined;
    valueParser?: string | import('@ag-grid-community/core').ValueParserFunc<any, any> | undefined;
    cellEditor?: any;
    cellEditorParams?: any;
    cellEditorSelector?: import('@ag-grid-community/core').CellEditorSelectorFunc<any, any> | undefined;
    singleClickEdit?: boolean;
    cellEditorPopup?: boolean;
    cellEditorPopupPosition?: "over" | "under";
    useValueParserForImport?: boolean;
    onCellValueChanged?: ((event: import('@ag-grid-community/core').NewValueParams<any, any>) => void) | undefined;
    onCellClicked?: ((event: import('@ag-grid-community/core').CellClickedEvent<any, any>) => void) | undefined;
    onCellDoubleClicked?: ((event: import('@ag-grid-community/core').CellDoubleClickedEvent<any, any>) => void) | undefined;
    onCellContextMenu?: ((event: import('@ag-grid-community/core').CellContextMenuEvent<any, any>) => void) | undefined;
    getQuickFilterText?: ((params: import('@ag-grid-community/core').GetQuickFilterTextParams<any, any>) => string) | undefined;
    filterValueGetter?: string | import('@ag-grid-community/core').ValueGetterFunc<any, any> | undefined;
    floatingFilter?: boolean;
    suppressFloatingFilterButton?: boolean;
    headerComponent?: any;
    headerComponentParams?: any;
    menuTabs?: import('@ag-grid-community/core').ColumnMenuTab[];
    columnChooserParams?: import('@ag-grid-community/core').ColumnChooserParams;
    columnsMenuParams?: import('@ag-grid-community/core').ColumnsMenuParams;
    suppressMenu?: boolean;
    suppressHeaderMenuButton?: boolean;
    suppressHeaderFilterButton?: boolean;
    mainMenuItems?: (string | import('@ag-grid-community/core').MenuItemDef<any, any>)[] | import('@ag-grid-community/core').GetMainMenuItems<any, any> | undefined;
    contextMenuItems?: (string | import('@ag-grid-community/core').MenuItemDef<any, any>)[] | import('@ag-grid-community/core').GetContextMenuItems<any, any> | undefined;
    headerCheckboxSelection?: boolean | import('@ag-grid-community/core').HeaderCheckboxSelectionCallback<any, any> | undefined;
    headerCheckboxSelectionFilteredOnly?: boolean;
    headerCheckboxSelectionCurrentPageOnly?: boolean;
    chartDataType?: "category" | "series" | "time" | "excluded";
    pinned?: boolean | "left" | "right" | null;
    initialPinned?: boolean | "left" | "right";
    lockPinned?: boolean;
    pivot?: boolean;
    initialPivot?: boolean;
    pivotIndex?: number | null;
    initialPivotIndex?: number;
    pivotComparator?: (valueA: string, valueB: string) => number;
    enablePivot?: boolean;
    cellStyle?: import('@ag-grid-community/core').CellStyle | import('@ag-grid-community/core').CellStyleFunc<any, any> | undefined;
    cellClass?: string | string[] | import('@ag-grid-community/core').CellClassFunc<any, any> | undefined;
    cellClassRules?: import('@ag-grid-community/core').CellClassRules<any, any> | undefined;
    cellRenderer?: any;
    cellRendererParams?: any;
    cellRendererSelector?: import('@ag-grid-community/core').CellRendererSelectorFunc<any, any> | undefined;
    loadingCellRenderer?: any;
    loadingCellRendererParams?: any;
    loadingCellRendererSelector?: import('@ag-grid-community/core').CellRendererSelectorFunc<any, any> | undefined;
    autoHeight?: boolean;
    wrapText?: boolean;
    enableCellChangeFlash?: boolean;
    suppressCellFlash?: boolean;
    rowDrag?: boolean | import('@ag-grid-community/core').RowDragCallback<any, any> | undefined;
    rowDragText?: (params: import('@ag-grid-community/core').IRowDragItem, dragItemCount: number) => string;
    dndSource?: boolean | import('@ag-grid-community/core').DndSourceCallback<any, any> | undefined;
    dndSourceOnRowDrag?: ((params: import('@ag-grid-community/core').DndSourceOnRowDragParams<any>) => void) | undefined;
    rowGroup?: boolean;
    initialRowGroup?: boolean;
    rowGroupIndex?: number | null;
    initialRowGroupIndex?: number;
    enableRowGroup?: boolean;
    enableValue?: boolean;
    aggFunc?: string | import('@ag-grid-community/core').IAggFunc<any, any> | null | undefined;
    initialAggFunc?: string | import('@ag-grid-community/core').IAggFunc<any, any> | undefined;
    defaultAggFunc?: string;
    allowedAggFuncs?: string[];
    showRowGroup?: string | boolean;
    sortable?: boolean;
    sort?: import('@ag-grid-community/core').SortDirection;
    initialSort?: import('@ag-grid-community/core').SortDirection;
    sortIndex?: number | null;
    initialSortIndex?: number;
    sortingOrder?: import('@ag-grid-community/core').SortDirection[];
    comparator?: ((valueA: any, valueB: any, nodeA: import('@ag-grid-community/core').IRowNode<any>, nodeB: import('@ag-grid-community/core').IRowNode<any>, isDescending: boolean) => number) | undefined;
    unSortIcon?: boolean;
    colSpan?: ((params: import('@ag-grid-community/core').ColSpanParams<any, any>) => number) | undefined;
    rowSpan?: ((params: import('@ag-grid-community/core').RowSpanParams<any, any>) => number) | undefined;
    width?: number;
    initialWidth?: number;
    minWidth?: number;
    maxWidth?: number;
    flex?: number;
    initialFlex?: number;
    resizable?: boolean;
    suppressSizeToFit?: boolean;
    suppressAutoSize?: boolean;
    pivotValueColumn?: import('@ag-grid-community/core').Column | null;
    pivotTotalColumnIds?: string[];
    suppressSpanHeaderHeight?: boolean;
    headerName?: string;
    headerValueGetter?: string | import('@ag-grid-community/core').HeaderValueGetterFunc<any, any> | undefined;
    headerTooltip?: string;
    headerClass?: import('@ag-grid-community/core').HeaderClass<any, any> | undefined;
    suppressHeaderKeyboardEvent?: ((params: import('@ag-grid-community/core').SuppressHeaderKeyboardEventParams<any, any>) => boolean) | undefined;
    columnGroupShow?: import('@ag-grid-community/core').ColumnGroupShowType;
    toolPanelClass?: import('@ag-grid-community/core').ToolPanelClass<any, any> | undefined;
    suppressColumnsToolPanel?: boolean;
    suppressFiltersToolPanel?: boolean;
    tooltipComponent?: any;
    tooltipComponentParams?: any;
    pivotKeys?: string[];
    cellAriaRole?: string;
    context?: any;
    wrapHeaderText?: boolean;
    autoHeaderHeight?: boolean;
    suppressHeaderContextMenu?: boolean;
    filter?: any;
    filterParams?: any;
    floatingFilterComponent?: any;
    floatingFilterComponentParams?: any;
}[];
