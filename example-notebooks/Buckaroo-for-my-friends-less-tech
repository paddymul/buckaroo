{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b18dc926-43d4-4db0-9f59-07bef3fb40ff",
   "metadata": {
    "tags": []
   },
   "source": [
    "# Explaining how Buckaroo fits into the PyData ecosystem for Friends and Family\n",
    "\n",
    "I want to epxlain for my non technical friends what I have been building, and how it fits into the larger Python Data Ecosystem.\n",
    "\n",
    "## How programming languages do Math\n",
    "\n",
    "Before we dive into exciting visuals and interactive programs, let’s lay some groundwork. In commonly used programming languages like Python, JavaScript, and Excel, mathematical operations can be slow. When evaluating an expression like `c = a + b`, the computer must check the types of a and b, then figure out how to add them. Other languages like `C` and `Fortran` allowed faster processing but are less user-friendly.\n",
    "\n",
    "## NumPy: Accelerating Matrix Math\n",
    "\n",
    "Quickly performing operations on matrices is essential for linear regression, image recognition, and AI (like ChatGPT). \n",
    "\n",
    "In 2006, Travis Oliphant created NumPy — a library specifically for arrays and matrices. In most programming languages, adding two lists of numbers involves type-checking every element.  NumPy determines the types of entire matrices, then efficiently adds their elements together. \n",
    "\n",
    "Let's see how much faster this is on a 1,000 x 1,000 matrix!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b76f1c6a-b771-4d47-9d8a-da73e1ea8ccb",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2590"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "70 * 37"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "26e9a7f0-4c06-4248-beee-75b8137acd1a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36.6 ms ± 510 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n"
     ]
    }
   ],
   "source": [
    "ELEMENTS = 1_000_000\n",
    "py_a = [x for x in range(ELEMENTS)]\n",
    "py_b = [x for x in range(ELEMENTS*10, 0, -10)]\n",
    "%timeit -n 10 [py_a[i] + py_b[i] for i in range(ELEMENTS)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b937620f-eb44-492f-ba3d-7506e2c89ff5",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "787 µs ± 126 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "np_a = np.arange(ELEMENTS)\n",
    "np_b = np.arange(ELEMENTS * 10, 0, -10)\n",
    "%timeit -n 100 np_a + np_b"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c33cfbd3-4edd-4ddb-a02c-03b565605d37",
   "metadata": {},
   "source": [
    "## How much faster\n",
    "37.8 milliseconds vs 895 microseconds, or about 50 times faster. A microsecond is a milionth of a second, a millisecond is a thousandth\n",
    "With NumPy, C/Fortran speed was accessible from the friendly language of python, in short easy to understand snippets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f193dc4b-e988-4daf-9d4a-51074e284b78",
   "metadata": {},
   "source": [
    "# The PyData ecosystem emerges\n",
    "\n",
    "NumPy was revolutionary because it made high performance numerical computing accesible to academics that needed to harness computation to power their analyses.  Computational Biologists, Physicists, electrical engineers, and Astophysiscists all used NumPy, and contributed back to this open source library.  They also wrote their own libraries \n",
    "\n",
    "* [SciPy](https://scipy.org/) for linear regressions, differential equations, and much more.  2001 - Travis Oliphant and many more\n",
    "* [Matplotlib](https://matplotlib.org/) for static plots 2003\n",
    "\n",
    "Here are these two tools together to build a linear regression chart. https://python-graph-gallery.com/scatterplot-with-regression-fit-in-matplotlib/"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edcb49e2-d44c-4a6c-9535-529db8704338",
   "metadata": {},
   "source": [
    "# Explaining Buckarooto my non-technical friends \n",
    "\n",
    "This notebook explains my side project Buckaroo, and how it fits into the datascience ecosystem.\n",
    "\n",
    "## Background on python and how it's used in datascience\n",
    "\n",
    "Before we dive into exciting visuals and interactive programs, let’s lay some groundwork.\n",
    "\n",
    "Python is a popular programming language, you might also have heard of java, C, and javascript.  Datascientists have come to rely on python because it balances speed of execution (C is faster) with ease of use and learning.  There are other open source libraries that Buckaroo leverages."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26840cf2-8e50-4664-ad93-100827989534",
   "metadata": {},
   "source": [
    "\n",
    "### NumPy\n",
    "\n",
    "NumPy was written by Travis Oliphant in 2006.  Matrix math is at the heart of linear regression, image recognition, and AI like ChatGPT.  In many cases NumPy accelerates matrix operations to 25-100x faster than raw python.\n",
    "\n",
    "Here is NumPy and the Matplotlib charting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "805df0ba-4349-4ea3-a337-8a19cef0e2c2",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x900 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "%matplotlib inline\n",
    "rng = np.random.default_rng(1234)\n",
    "# Generate data\n",
    "x = rng.uniform(0, 10, size=100)\n",
    "y = x + rng.normal(size=100)\n",
    "\n",
    "# Initialize layout\n",
    "fig, ax = plt.subplots(figsize = (9, 9))\n",
    "\n",
    "# Add scatterplot\n",
    "ax.scatter(x, y, s=60, alpha=0.7, edgecolors=\"k\")\n",
    "\n",
    "# Fit linear regression via least squares with numpy.polyfit\n",
    "# It returns an slope (b) and intercept (a)\n",
    "# deg=1 means linear fit (i.e. polynomial of degree 1)\n",
    "b, a = np.polyfit(x, y, deg=1)\n",
    "\n",
    "# Create sequence of 100 numbers from 0 to 100 \n",
    "xseq = np.linspace(0, 10, num=100)\n",
    "\n",
    "# Plot regression line\n",
    "ax.plot(xseq, a + b * xseq, color=\"k\", lw=2.5);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1181d51f-e8a6-46d6-9127-0a08a519c935",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Pandas\n",
    "\n",
    "Pandas was built by quant researcher Wes Mckinney in 2011.  It uses NumPy to deal with hetrogenous data (intgers, floats and strings) and makes manipulation easier, allowing excel like operations (not the UI)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "01999cd3-8b95-4903-8e7d-a5ec1932ab65",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "66b465688de5471f8ff1aecd1cf0dc87",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "BuckarooWidget(buckaroo_options={'sampled': ['random'], 'auto_clean': ['aggressive', 'conservative'], 'post_pr…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df = pd.read_csv(\"/Users/paddy/code/example-notebooks/citibike-trips.csv\") \n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d57b49e8-b5b8-4dfc-8e7b-77537fd58f18",
   "metadata": {},
   "source": [
    "# The Jupyter notebook\n",
    "\n",
    "I have been demonstrating the entire PyData ecosystem inside of the Jupyter notebook.  This is an interactive analysis and documentation environment built around python.  While a grad student Fernando Perez wanted a better [interactive environment](https://en.wikipedia.org/wiki/IPython) for playing with data in 2001.  In 2011 the IPython first released the [jupyter notebook](https://en.wikipedia.org/wiki/Project_Jupyter) interface you see here.\n",
    "\n",
    "Combining small snippets of analysis code, with charts, and narrative text allowed academics to write and share research in ways that were cumbersome before.\n",
    "(Maybe show emacs/vscode traditional method of writing code).  This is particularly important for data intensive analysis.  You need to look at the data and play with it iteratively.  This interface works very well for the problem that data scientists and academics deal with every day."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87cac8c9-5adc-4cdf-a409-4cb2460476a2",
   "metadata": {},
   "source": [
    "# Pandas\n",
    "\n",
    "In 2011 financial quant researcher Wes Mckinney released pandas which made analysis of realworld data easier, timeseries data in particular.  Pandas was built on top of NumPY, and allowed computations to be run on mixed datasets (you could have a set of temperature observations ordered by time of day, with a string column for location).\n",
    "\n",
    "Pandas like each of the previous tools took what was technically possible, and increased the usability so a broader audience could start doing their work in the PyData ecosystem.\n",
    "\n",
    "The following code shows reading a 300,000 csv file about citibike trips"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4a570b8c-0a3a-4746-8de4-81dadb39c497",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tripduration</th>\n",
       "      <th>starttime</th>\n",
       "      <th>stoptime</th>\n",
       "      <th>start station id</th>\n",
       "      <th>start station name</th>\n",
       "      <th>start station latitude</th>\n",
       "      <th>start station longitude</th>\n",
       "      <th>end station id</th>\n",
       "      <th>end station name</th>\n",
       "      <th>end station latitude</th>\n",
       "      <th>end station longitude</th>\n",
       "      <th>bikeid</th>\n",
       "      <th>usertype</th>\n",
       "      <th>birth year</th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>471</td>\n",
       "      <td>2014-01-01 00:00:06</td>\n",
       "      <td>2014-01-01 00:07:57</td>\n",
       "      <td>2009</td>\n",
       "      <td>Catherine St &amp; Monroe St</td>\n",
       "      <td>40.711174</td>\n",
       "      <td>-73.996826</td>\n",
       "      <td>263</td>\n",
       "      <td>Elizabeth St &amp; Hester St</td>\n",
       "      <td>40.717290</td>\n",
       "      <td>-73.996375</td>\n",
       "      <td>16379</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1986</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1494</td>\n",
       "      <td>2014-01-01 00:00:38</td>\n",
       "      <td>2014-01-01 00:25:32</td>\n",
       "      <td>536</td>\n",
       "      <td>1 Ave &amp; E 30 St</td>\n",
       "      <td>40.741444</td>\n",
       "      <td>-73.975361</td>\n",
       "      <td>259</td>\n",
       "      <td>South St &amp; Whitehall St</td>\n",
       "      <td>40.701221</td>\n",
       "      <td>-74.012342</td>\n",
       "      <td>15611</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1963</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>464</td>\n",
       "      <td>2014-01-01 00:03:59</td>\n",
       "      <td>2014-01-01 00:11:43</td>\n",
       "      <td>228</td>\n",
       "      <td>E 48 St &amp; 3 Ave</td>\n",
       "      <td>40.754601</td>\n",
       "      <td>-73.971879</td>\n",
       "      <td>2022</td>\n",
       "      <td>E 59 St &amp; Sutton Pl</td>\n",
       "      <td>40.758491</td>\n",
       "      <td>-73.959206</td>\n",
       "      <td>16613</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1991</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>373</td>\n",
       "      <td>2014-01-01 00:05:15</td>\n",
       "      <td>2014-01-01 00:11:28</td>\n",
       "      <td>519</td>\n",
       "      <td>Pershing Square N</td>\n",
       "      <td>40.751884</td>\n",
       "      <td>-73.977702</td>\n",
       "      <td>526</td>\n",
       "      <td>E 33 St &amp; 5 Ave</td>\n",
       "      <td>40.747659</td>\n",
       "      <td>-73.984907</td>\n",
       "      <td>15938</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1989</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>660</td>\n",
       "      <td>2014-01-01 00:05:18</td>\n",
       "      <td>2014-01-01 00:16:18</td>\n",
       "      <td>83</td>\n",
       "      <td>Atlantic Ave &amp; Fort Greene Pl</td>\n",
       "      <td>40.683826</td>\n",
       "      <td>-73.976323</td>\n",
       "      <td>436</td>\n",
       "      <td>Hancock St &amp; Bedford Ave</td>\n",
       "      <td>40.682166</td>\n",
       "      <td>-73.953990</td>\n",
       "      <td>19830</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1990</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300395</th>\n",
       "      <td>780</td>\n",
       "      <td>2014-01-31 23:57:34</td>\n",
       "      <td>2014-02-01 00:10:34</td>\n",
       "      <td>308</td>\n",
       "      <td>St James Pl &amp; Oliver St</td>\n",
       "      <td>40.713079</td>\n",
       "      <td>-73.998512</td>\n",
       "      <td>312</td>\n",
       "      <td>Allen St &amp; E Houston St</td>\n",
       "      <td>40.722055</td>\n",
       "      <td>-73.989111</td>\n",
       "      <td>17299</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1988</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300396</th>\n",
       "      <td>1074</td>\n",
       "      <td>2014-01-31 23:57:45</td>\n",
       "      <td>2014-02-01 00:15:39</td>\n",
       "      <td>482</td>\n",
       "      <td>W 15 St &amp; 7 Ave</td>\n",
       "      <td>40.739355</td>\n",
       "      <td>-73.999318</td>\n",
       "      <td>488</td>\n",
       "      <td>W 39 St &amp; 9 Ave</td>\n",
       "      <td>40.756458</td>\n",
       "      <td>-73.993722</td>\n",
       "      <td>19886</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1982</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300397</th>\n",
       "      <td>191</td>\n",
       "      <td>2014-01-31 23:58:16</td>\n",
       "      <td>2014-02-01 00:01:27</td>\n",
       "      <td>247</td>\n",
       "      <td>Perry St &amp; Bleecker St</td>\n",
       "      <td>40.735354</td>\n",
       "      <td>-74.004831</td>\n",
       "      <td>368</td>\n",
       "      <td>Carmine St &amp; 6 Ave</td>\n",
       "      <td>40.730386</td>\n",
       "      <td>-74.002150</td>\n",
       "      <td>20249</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1969</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300398</th>\n",
       "      <td>1052</td>\n",
       "      <td>2014-01-31 23:58:34</td>\n",
       "      <td>2014-02-01 00:16:06</td>\n",
       "      <td>482</td>\n",
       "      <td>W 15 St &amp; 7 Ave</td>\n",
       "      <td>40.739355</td>\n",
       "      <td>-73.999318</td>\n",
       "      <td>488</td>\n",
       "      <td>W 39 St &amp; 9 Ave</td>\n",
       "      <td>40.756458</td>\n",
       "      <td>-73.993722</td>\n",
       "      <td>19922</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1981</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300399</th>\n",
       "      <td>1133</td>\n",
       "      <td>2014-01-31 23:58:43</td>\n",
       "      <td>2014-02-01 00:17:36</td>\n",
       "      <td>450</td>\n",
       "      <td>W 49 St &amp; 8 Ave</td>\n",
       "      <td>40.762272</td>\n",
       "      <td>-73.987882</td>\n",
       "      <td>294</td>\n",
       "      <td>Washington Square E</td>\n",
       "      <td>40.730494</td>\n",
       "      <td>-73.995721</td>\n",
       "      <td>18944</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1969</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>300400 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        tripduration            starttime             stoptime  \\\n",
       "0                471  2014-01-01 00:00:06  2014-01-01 00:07:57   \n",
       "1               1494  2014-01-01 00:00:38  2014-01-01 00:25:32   \n",
       "2                464  2014-01-01 00:03:59  2014-01-01 00:11:43   \n",
       "3                373  2014-01-01 00:05:15  2014-01-01 00:11:28   \n",
       "4                660  2014-01-01 00:05:18  2014-01-01 00:16:18   \n",
       "...              ...                  ...                  ...   \n",
       "300395           780  2014-01-31 23:57:34  2014-02-01 00:10:34   \n",
       "300396          1074  2014-01-31 23:57:45  2014-02-01 00:15:39   \n",
       "300397           191  2014-01-31 23:58:16  2014-02-01 00:01:27   \n",
       "300398          1052  2014-01-31 23:58:34  2014-02-01 00:16:06   \n",
       "300399          1133  2014-01-31 23:58:43  2014-02-01 00:17:36   \n",
       "\n",
       "        start station id             start station name  \\\n",
       "0                   2009       Catherine St & Monroe St   \n",
       "1                    536                1 Ave & E 30 St   \n",
       "2                    228                E 48 St & 3 Ave   \n",
       "3                    519              Pershing Square N   \n",
       "4                     83  Atlantic Ave & Fort Greene Pl   \n",
       "...                  ...                            ...   \n",
       "300395               308        St James Pl & Oliver St   \n",
       "300396               482                W 15 St & 7 Ave   \n",
       "300397               247         Perry St & Bleecker St   \n",
       "300398               482                W 15 St & 7 Ave   \n",
       "300399               450                W 49 St & 8 Ave   \n",
       "\n",
       "        start station latitude  start station longitude  end station id  \\\n",
       "0                    40.711174               -73.996826             263   \n",
       "1                    40.741444               -73.975361             259   \n",
       "2                    40.754601               -73.971879            2022   \n",
       "3                    40.751884               -73.977702             526   \n",
       "4                    40.683826               -73.976323             436   \n",
       "...                        ...                      ...             ...   \n",
       "300395               40.713079               -73.998512             312   \n",
       "300396               40.739355               -73.999318             488   \n",
       "300397               40.735354               -74.004831             368   \n",
       "300398               40.739355               -73.999318             488   \n",
       "300399               40.762272               -73.987882             294   \n",
       "\n",
       "                end station name  end station latitude  end station longitude  \\\n",
       "0       Elizabeth St & Hester St             40.717290             -73.996375   \n",
       "1        South St & Whitehall St             40.701221             -74.012342   \n",
       "2            E 59 St & Sutton Pl             40.758491             -73.959206   \n",
       "3                E 33 St & 5 Ave             40.747659             -73.984907   \n",
       "4       Hancock St & Bedford Ave             40.682166             -73.953990   \n",
       "...                          ...                   ...                    ...   \n",
       "300395   Allen St & E Houston St             40.722055             -73.989111   \n",
       "300396           W 39 St & 9 Ave             40.756458             -73.993722   \n",
       "300397        Carmine St & 6 Ave             40.730386             -74.002150   \n",
       "300398           W 39 St & 9 Ave             40.756458             -73.993722   \n",
       "300399       Washington Square E             40.730494             -73.995721   \n",
       "\n",
       "        bikeid    usertype birth year  gender  \n",
       "0        16379  Subscriber       1986       1  \n",
       "1        15611  Subscriber       1963       1  \n",
       "2        16613  Subscriber       1991       1  \n",
       "3        15938  Subscriber       1989       1  \n",
       "4        19830  Subscriber       1990       1  \n",
       "...        ...         ...        ...     ...  \n",
       "300395   17299  Subscriber       1988       1  \n",
       "300396   19886  Subscriber       1982       1  \n",
       "300397   20249  Subscriber       1969       2  \n",
       "300398   19922  Subscriber       1981       2  \n",
       "300399   18944  Subscriber       1969       1  \n",
       "\n",
       "[300400 rows x 15 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df = pd.read_csv(\"/Users/paddy/code/example-notebooks/citibike-trips.csv\") \n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a1795cf2-bafd-4121-bb56-730037b5e646",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "733.9689447403462"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Once you have a dataset like this there are a lot of operations you might want to perform\n",
    "df['tripduration'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a5c02534-b54f-41ed-b049-6b172e1274ef",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "start station name\n",
       "Pershing Square N             3634\n",
       "8 Ave & W 31 St               3295\n",
       "Lafayette St & E 8 St         3178\n",
       "W 21 St & 6 Ave               3068\n",
       "E 17 St & Broadway            2764\n",
       "                              ... \n",
       "Park Ave & St Edwards St        92\n",
       "Carlton Ave & Park Ave          62\n",
       "Hanover Pl & Livingston St      61\n",
       "Bedford Ave & S 9th St          53\n",
       "Railroad Ave & Kay Ave          26\n",
       "Name: count, Length: 329, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['start station name'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "35b9707a-e2be-4501-a9bb-25d94603d2d2",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tripduration</th>\n",
       "      <th>start station id</th>\n",
       "      <th>start station latitude</th>\n",
       "      <th>start station longitude</th>\n",
       "      <th>end station id</th>\n",
       "      <th>end station latitude</th>\n",
       "      <th>end station longitude</th>\n",
       "      <th>bikeid</th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>start station name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1 Ave &amp; E 15 St</th>\n",
       "      <td>630.893122</td>\n",
       "      <td>504.0</td>\n",
       "      <td>40.732219</td>\n",
       "      <td>-73.981656</td>\n",
       "      <td>455.964550</td>\n",
       "      <td>40.735126</td>\n",
       "      <td>-73.985812</td>\n",
       "      <td>17966.811111</td>\n",
       "      <td>1.235979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1 Ave &amp; E 18 St</th>\n",
       "      <td>868.694222</td>\n",
       "      <td>2003.0</td>\n",
       "      <td>40.734161</td>\n",
       "      <td>-73.980243</td>\n",
       "      <td>448.080257</td>\n",
       "      <td>40.737403</td>\n",
       "      <td>-73.987460</td>\n",
       "      <td>17919.951846</td>\n",
       "      <td>1.238363</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1 Ave &amp; E 30 St</th>\n",
       "      <td>694.495397</td>\n",
       "      <td>536.0</td>\n",
       "      <td>40.741444</td>\n",
       "      <td>-73.975361</td>\n",
       "      <td>462.572385</td>\n",
       "      <td>40.743731</td>\n",
       "      <td>-73.985734</td>\n",
       "      <td>18046.927197</td>\n",
       "      <td>1.140586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1 Ave &amp; E 44 St</th>\n",
       "      <td>792.414072</td>\n",
       "      <td>455.0</td>\n",
       "      <td>40.750020</td>\n",
       "      <td>-73.969053</td>\n",
       "      <td>481.937716</td>\n",
       "      <td>40.748446</td>\n",
       "      <td>-73.981159</td>\n",
       "      <td>17911.136101</td>\n",
       "      <td>1.162630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10 Ave &amp; W 28 St</th>\n",
       "      <td>1769.801198</td>\n",
       "      <td>489.0</td>\n",
       "      <td>40.750664</td>\n",
       "      <td>-74.001768</td>\n",
       "      <td>442.607186</td>\n",
       "      <td>40.744955</td>\n",
       "      <td>-73.993216</td>\n",
       "      <td>18087.250299</td>\n",
       "      <td>1.140120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Willoughby Ave &amp; Hall St</th>\n",
       "      <td>675.817568</td>\n",
       "      <td>244.0</td>\n",
       "      <td>40.691960</td>\n",
       "      <td>-73.965369</td>\n",
       "      <td>344.408784</td>\n",
       "      <td>40.695816</td>\n",
       "      <td>-73.976560</td>\n",
       "      <td>17943.695946</td>\n",
       "      <td>1.263514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Willoughby Ave &amp; Walworth St</th>\n",
       "      <td>1972.972678</td>\n",
       "      <td>373.0</td>\n",
       "      <td>40.693317</td>\n",
       "      <td>-73.953820</td>\n",
       "      <td>438.191257</td>\n",
       "      <td>40.701361</td>\n",
       "      <td>-73.972373</td>\n",
       "      <td>18330.491803</td>\n",
       "      <td>1.114754</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Willoughby St &amp; Fleet St</th>\n",
       "      <td>434.320000</td>\n",
       "      <td>239.0</td>\n",
       "      <td>40.691966</td>\n",
       "      <td>-73.981302</td>\n",
       "      <td>331.182500</td>\n",
       "      <td>40.693646</td>\n",
       "      <td>-73.973454</td>\n",
       "      <td>17728.050000</td>\n",
       "      <td>1.212500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wythe Ave &amp; Metropolitan Ave</th>\n",
       "      <td>1146.836177</td>\n",
       "      <td>2002.0</td>\n",
       "      <td>40.716887</td>\n",
       "      <td>-73.963198</td>\n",
       "      <td>593.399317</td>\n",
       "      <td>40.712539</td>\n",
       "      <td>-73.975979</td>\n",
       "      <td>17946.078498</td>\n",
       "      <td>1.259386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>York St &amp; Jay St</th>\n",
       "      <td>643.354694</td>\n",
       "      <td>430.0</td>\n",
       "      <td>40.701485</td>\n",
       "      <td>-73.986569</td>\n",
       "      <td>516.733234</td>\n",
       "      <td>40.702361</td>\n",
       "      <td>-73.981304</td>\n",
       "      <td>17881.278689</td>\n",
       "      <td>1.233979</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>329 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                              tripduration  start station id  \\\n",
       "start station name                                             \n",
       "1 Ave & E 15 St                 630.893122             504.0   \n",
       "1 Ave & E 18 St                 868.694222            2003.0   \n",
       "1 Ave & E 30 St                 694.495397             536.0   \n",
       "1 Ave & E 44 St                 792.414072             455.0   \n",
       "10 Ave & W 28 St               1769.801198             489.0   \n",
       "...                                    ...               ...   \n",
       "Willoughby Ave & Hall St        675.817568             244.0   \n",
       "Willoughby Ave & Walworth St   1972.972678             373.0   \n",
       "Willoughby St & Fleet St        434.320000             239.0   \n",
       "Wythe Ave & Metropolitan Ave   1146.836177            2002.0   \n",
       "York St & Jay St                643.354694             430.0   \n",
       "\n",
       "                              start station latitude  start station longitude  \\\n",
       "start station name                                                              \n",
       "1 Ave & E 15 St                            40.732219               -73.981656   \n",
       "1 Ave & E 18 St                            40.734161               -73.980243   \n",
       "1 Ave & E 30 St                            40.741444               -73.975361   \n",
       "1 Ave & E 44 St                            40.750020               -73.969053   \n",
       "10 Ave & W 28 St                           40.750664               -74.001768   \n",
       "...                                              ...                      ...   \n",
       "Willoughby Ave & Hall St                   40.691960               -73.965369   \n",
       "Willoughby Ave & Walworth St               40.693317               -73.953820   \n",
       "Willoughby St & Fleet St                   40.691966               -73.981302   \n",
       "Wythe Ave & Metropolitan Ave               40.716887               -73.963198   \n",
       "York St & Jay St                           40.701485               -73.986569   \n",
       "\n",
       "                              end station id  end station latitude  \\\n",
       "start station name                                                   \n",
       "1 Ave & E 15 St                   455.964550             40.735126   \n",
       "1 Ave & E 18 St                   448.080257             40.737403   \n",
       "1 Ave & E 30 St                   462.572385             40.743731   \n",
       "1 Ave & E 44 St                   481.937716             40.748446   \n",
       "10 Ave & W 28 St                  442.607186             40.744955   \n",
       "...                                      ...                   ...   \n",
       "Willoughby Ave & Hall St          344.408784             40.695816   \n",
       "Willoughby Ave & Walworth St      438.191257             40.701361   \n",
       "Willoughby St & Fleet St          331.182500             40.693646   \n",
       "Wythe Ave & Metropolitan Ave      593.399317             40.712539   \n",
       "York St & Jay St                  516.733234             40.702361   \n",
       "\n",
       "                              end station longitude        bikeid    gender  \n",
       "start station name                                                           \n",
       "1 Ave & E 15 St                          -73.985812  17966.811111  1.235979  \n",
       "1 Ave & E 18 St                          -73.987460  17919.951846  1.238363  \n",
       "1 Ave & E 30 St                          -73.985734  18046.927197  1.140586  \n",
       "1 Ave & E 44 St                          -73.981159  17911.136101  1.162630  \n",
       "10 Ave & W 28 St                         -73.993216  18087.250299  1.140120  \n",
       "...                                             ...           ...       ...  \n",
       "Willoughby Ave & Hall St                 -73.976560  17943.695946  1.263514  \n",
       "Willoughby Ave & Walworth St             -73.972373  18330.491803  1.114754  \n",
       "Willoughby St & Fleet St                 -73.973454  17728.050000  1.212500  \n",
       "Wythe Ave & Metropolitan Ave             -73.975979  17946.078498  1.259386  \n",
       "York St & Jay St                         -73.981304  17881.278689  1.233979  \n",
       "\n",
       "[329 rows x 9 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('start station name').mean('tripduration')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "35519673-7d49-42af-bc2d-de0971d38bba",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['tripduration'].hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "275c33b0-1f90-42f2-91a6-abb9593cf27e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['tripduration'].quantile(.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1743a340-ee80-4fea-bdc5-2d4b51ab983d",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['tripduration'].quantile(.99)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cc050042-2c6d-4d47-adcd-139321ccb726",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df[(df['tripduration'] > df['tripduration'].quantile(.01)) & (df['tripduration'] < df['tripduration'].quantile(.99))]['tripduration'].hist()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "269109ab-fb30-449e-9eaa-b90c8f053c25",
   "metadata": {},
   "source": [
    "# Why I wrote Buckaroo\n",
    "\n",
    "Thank you for bearing with me this far.  You now have seen the PyData ecosystem and a small sample of how it is used.\n",
    "These are all powerful tools, but a bit cumbersome to use.  I look at multiple different datasets a day, and I want to quickly understand them.  I don't want to type a bunch of commands to get the overview I'm looking for and I want to be able to look at the raw data.  Here is Buckaroo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2c5683c8-7cc5-4933-bd75-fd74420a81af",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ab1ff592f67f49308d226739cff64a74",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "BuckarooWidget(buckaroo_options={'sampled': ['random'], 'auto_clean': ['aggressive', 'conservative'], 'post_pr…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import buckaroo\n",
    "df = pd.read_csv(\"/Users/paddy/code/example-notebooks/citibike-trips.csv\") \n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d8e60c0c-a37f-4365-9fac-6f5438968940",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
