import{j as e}from"./jsx-runtime-DiklIkkE.js";import{r as s}from"./index-DRjF_FHU.js";import{O as L}from"./Operations-D81D5a87.js";/* empty css                */import{s as k,b as i,d as V,m as B}from"./OperationExamples-DcZ4epzJ.js";import"./lodash-CGIzQN7T.js";function N({filledOperations:r,style:n}){const a={...{margin:"0",textAlign:"left"},...n};return e.jsx("div",{className:"command-displayer",style:{width:"100%"},children:e.jsx("pre",{style:a,children:JSON.stringify(r)})})}function b({style:r,generatedPyCode:n}){const a={...{margin:"0",textAlign:"left"},...r};return e.jsx("div",{className:"python-displayer",style:{width:"100%"},children:e.jsx("pre",{style:a,children:n})})}function S({currentTab:r,_setTab:n,tabName:t}){return e.jsx("li",{onClick:()=>{n(t)},className:r===t?"active":"",children:t})}function P({filledOperations:r,operation_result:n}){const[t,a]=s.useState("DataFrame"),m={height:"45vh"};return e.jsxs("div",{className:"dependent-tabs",style:{width:"100%"},children:[e.jsxs("ul",{className:"tabs",children:[e.jsx(S,{currentTab:t,_setTab:a,tabName:"Python"}),e.jsx(S,{currentTab:t,_setTab:a,tabName:"Operations"})]}),e.jsxs("div",{className:"output-area",children:[n.transform_error?e.jsxs("div",{children:[e.jsx("h2",{children:" error "}),e.jsx(b,{style:m,generatedPyCode:n.transform_error})]}):e.jsx("span",{}),{Operations:e.jsx(N,{style:m,filledOperations:r}),Python:e.jsx(b,{style:m,generatedPyCode:n.generated_py_code})}[t]]})]})}N.__docgenInfo={description:"",methods:[],displayName:"OperationDisplayer",props:{filledOperations:{required:!0,tsType:{name:"Array",elements:[{name:"union",raw:"OperationSingleColumn | OperationSingleArg | OperationTwoArg",elements:[{name:"tuple",raw:"[SymbolT, SymbolDf, string]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]}]}],raw:"Operation[]"},description:""},style:{required:!0,tsType:{name:"CSSProperties"},description:""}}};b.__docgenInfo={description:"",methods:[],displayName:"PythonDisplayer",props:{style:{required:!0,tsType:{name:"CSSProperties"},description:""},generatedPyCode:{required:!0,tsType:{name:"string"},description:""}}};S.__docgenInfo={description:"",methods:[],displayName:"TabComponent",props:{currentTab:{required:!0,tsType:{name:"any"},description:""},_setTab:{required:!0,tsType:{name:"any"},description:""},tabName:{required:!0,tsType:{name:"any"},description:""}}};P.__docgenInfo={description:"",methods:[],displayName:"DependentTabs",props:{filledOperations:{required:!0,tsType:{name:"Array",elements:[{name:"union",raw:"OperationSingleColumn | OperationSingleArg | OperationTwoArg",elements:[{name:"tuple",raw:"[SymbolT, SymbolDf, string]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]}]}],raw:"Operation[]"},description:""},operation_result:{required:!0,tsType:{name:"signature",type:"object",raw:`{
    transformed_df: DFWhole;
    generated_py_code: string;
    transform_error?: string;
}`,signature:{properties:[{key:"transformed_df",value:{name:"DFWhole",required:!0}},{key:"generated_py_code",value:{name:"string",required:!0}},{key:"transform_error",value:{name:"string",required:!1}}]}},description:""}}};function o({df_viewer_config:r,activeColumn:n,operations:t,setOperations:a,operation_result:m,command_config:F}){const I=r.column_config.map(W=>W.col_name);return e.jsx("div",{className:"columns-editor",style:{width:"100%"},children:e.jsxs("div",{children:[e.jsx(L,{operations:t,setOperations:a,activeColumn:n,allColumns:I,command_config:F}),e.jsx(P,{filledOperations:t,operation_result:m})]})})}o.__docgenInfo={description:"",methods:[],displayName:"ColumnsEditor",props:{df_viewer_config:{required:!0,tsType:{name:"DFViewerConfig"},description:""},activeColumn:{required:!0,tsType:{name:"string"},description:""},operations:{required:!0,tsType:{name:"Array",elements:[{name:"union",raw:"OperationSingleColumn | OperationSingleArg | OperationTwoArg",elements:[{name:"tuple",raw:"[SymbolT, SymbolDf, string]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]}]}],raw:"Operation[]"},description:""},setOperations:{required:!0,tsType:{name:"signature",type:"function",raw:"(ops: Operation[]) => void",signature:{arguments:[{type:{name:"Array",elements:[{name:"union",raw:"OperationSingleColumn | OperationSingleArg | OperationTwoArg",elements:[{name:"tuple",raw:"[SymbolT, SymbolDf, string]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]}]}],raw:"Operation[]"},name:"ops"}],return:{name:"void"}}},description:""},operation_result:{required:!0,tsType:{name:"signature",type:"object",raw:`{
    transformed_df: DFWhole;
    generated_py_code: string;
    transform_error?: string;
}`,signature:{properties:[{key:"transformed_df",value:{name:"DFWhole",required:!0}},{key:"generated_py_code",value:{name:"string",required:!0}},{key:"transform_error",value:{name:"string",required:!1}}]}},description:""},command_config:{required:!0,tsType:{name:"signature",type:"object",raw:`{
    argspecs: CommandArgSpec;
    defaultArgs: OperationDefaultArgs;
}`,signature:{properties:[{key:"argspecs",value:{name:"Record",elements:[{name:"string"},{name:"Array",elements:[{name:"union",raw:"TypeSpec | EnumSpec | ColEnumSpec | NoArgs",elements:[{name:"tuple",raw:'[number, string, "type", "integer" | "float" | "string"]',elements:[{name:"number"},{name:"string"},{name:"literal",value:'"type"'},{name:"union",raw:'"integer" | "float" | "string"',elements:[{name:"literal",value:'"integer"'},{name:"literal",value:'"float"'},{name:"literal",value:'"string"'}]}]},{name:"tuple",raw:'[number, string, "enum", string[]]',elements:[{name:"number"},{name:"string"},{name:"literal",value:'"enum"'},{name:"Array",elements:[{name:"string"}],raw:"string[]"}]},{name:"tuple",raw:'[number, string, "colEnum", string[]]',elements:[{name:"number"},{name:"string"},{name:"literal",value:'"colEnum"'},{name:"Array",elements:[{name:"string"}],raw:"string[]"}]},{name:"null"}]}],raw:"ArgSpec[]"}],raw:"Record<string, ArgSpec[]>",required:!0}},{key:"defaultArgs",value:{name:"Record",elements:[{name:"string"},{name:"union",raw:"OperationSingleColumn | OperationSingleArg | OperationTwoArg",elements:[{name:"tuple",raw:"[SymbolT, SymbolDf, string]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]}]}],raw:"Record<string, Operation>",required:!0}}]}},description:""}}};const l={column_config:[{col_name:"index",displayer_args:{displayer:"integer",min_digits:3,max_digits:5}},{col_name:"svg_column",displayer_args:{displayer:"SVGDisplayer"}},{col_name:"link_column",displayer_args:{displayer:"linkify"}},{col_name:"nanObject",displayer_args:{displayer:"integer",min_digits:3,max_digits:5},color_map_config:{color_rule:"color_map",map_name:"BLUE_TO_YELLOW",val_column:"tripduration"}}],extra_grid_config:{rowHeight:105},component_config:{height_fraction:1},pinned_rows:[]},g={transformed_df:{dfviewer_config:{pinned_rows:[],column_config:[]},data:[]},generated_py_code:"default py code",transform_error:void 0},z={title:"Buckaroo/ColumnsEditor",component:o,parameters:{layout:"centered"},tags:["autodocs"]},u={render:()=>{const[r,n]=s.useState(k);return e.jsx(o,{df_viewer_config:l,activeColumn:"index",operation_result:g,command_config:i,operations:r,setOperations:n})}},p={render:()=>{const[r,n]=s.useState([]);return e.jsx(o,{df_viewer_config:l,activeColumn:"index",operation_result:g,command_config:i,operations:r,setOperations:n})}},d={render:()=>{const[r,n]=s.useState([k[0]]);return e.jsx(o,{df_viewer_config:l,activeColumn:"index",operation_result:g,command_config:i,operations:r,setOperations:n})}},c={render:()=>{const[r,n]=s.useState(V);return e.jsx(o,{df_viewer_config:l,activeColumn:"index",operation_result:g,command_config:i,operations:r,setOperations:n})}},y={render:()=>{const[r,n]=s.useState(B);return e.jsx(o,{df_viewer_config:l,activeColumn:"index",operation_result:g,command_config:i,operations:r,setOperations:n})}};var f,_,w;u.parameters={...u.parameters,docs:{...(f=u.parameters)==null?void 0:f.docs,source:{originalSource:`{
  render: () => {
    const [operations, setOperations] = useState<Operation[]>(sampleOperations);
    return <ColumnsEditor df_viewer_config={df_viewer_config} activeColumn="index" operation_result={baseOperationResults} command_config={bakedCommandConfig} operations={operations} setOperations={setOperations} />;
  }
}`,...(w=(_=u.parameters)==null?void 0:_.docs)==null?void 0:w.source}}};var T,O,C;p.parameters={...p.parameters,docs:{...(T=p.parameters)==null?void 0:T.docs,source:{originalSource:`{
  render: () => {
    const [operations, setOperations] = useState<Operation[]>([]);
    return <ColumnsEditor df_viewer_config={df_viewer_config} activeColumn="index" operation_result={baseOperationResults} command_config={bakedCommandConfig} operations={operations} setOperations={setOperations} />;
  }
}`,...(C=(O=p.parameters)==null?void 0:O.docs)==null?void 0:C.source}}};var A,v,D;d.parameters={...d.parameters,docs:{...(A=d.parameters)==null?void 0:A.docs,source:{originalSource:`{
  render: () => {
    const [operations, setOperations] = useState<Operation[]>([sampleOperations[0]]);
    return <ColumnsEditor df_viewer_config={df_viewer_config} activeColumn="index" operation_result={baseOperationResults} command_config={bakedCommandConfig} operations={operations} setOperations={setOperations} />;
  }
}`,...(D=(v=d.parameters)==null?void 0:v.docs)==null?void 0:D.source}}};var x,R,h;c.parameters={...c.parameters,docs:{...(x=c.parameters)==null?void 0:x.docs,source:{originalSource:`{
  render: () => {
    const [operations, setOperations] = useState<Operation[]>(dataCleaningOps);
    return <ColumnsEditor df_viewer_config={df_viewer_config} activeColumn="index" operation_result={baseOperationResults} command_config={bakedCommandConfig} operations={operations} setOperations={setOperations} />;
  }
}`,...(h=(R=c.parameters)==null?void 0:R.docs)==null?void 0:h.source}}};var E,j,q;y.parameters={...y.parameters,docs:{...(E=y.parameters)==null?void 0:E.docs,source:{originalSource:`{
  render: () => {
    const [operations, setOperations] = useState<Operation[]>(manyOperations);
    return <ColumnsEditor df_viewer_config={df_viewer_config} activeColumn="index" operation_result={baseOperationResults} command_config={bakedCommandConfig} operations={operations} setOperations={setOperations} />;
  }
}`,...(q=(j=y.parameters)==null?void 0:j.docs)==null?void 0:q.source}}};const K=["Default","Empty","SingleOperation","DataCleaning","ManyOperations"];export{c as DataCleaning,u as Default,p as Empty,y as ManyOperations,d as SingleOperation,K as __namedExportsOrder,z as default};
