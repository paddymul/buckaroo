import{j as e}from"./jsx-runtime-DiklIkkE.js";import{r as O}from"./index-DRjF_FHU.js";import{_ as g}from"./lodash-CGIzQN7T.js";import{O as D}from"./OperationExamples-DcZ4epzJ.js";function E(n,r,m){return n.map(s=>s===r?m:s)}function q(n,r,m){return n.map((s,t)=>t===r?m:s)}function N(n,r,m){const s=g.clone(n);return s[r]=m,s}const k=(n,r=[])=>g.pickBy(n,m=>![null,void 0,...r].includes(m)),h=({command:n,setCommand:r,columns:m,commandPatterns:s})=>{if(n===void 0)return e.jsx("span",{});const t=n[0].symbol,b=s[t];if(g.isArray(b)){if(g.isEqual(b,[null]))return e.jsx("div",{className:"operation-detail"});{const o=b;return e.jsx("div",{className:"operation-detail",children:e.jsx(j,{command:n,fullPattern:o,setCommand:r,columns:m})})}}else return e.jsxs("h2",{children:["unknown command ",t]})},j=({command:n,fullPattern:r,setCommand:m,columns:s})=>{const t=b=>{const o=b[0],y=n[o],d=S=>{const a=q(n,o,S);m(a)};return e.jsx("div",{children:e.jsx(_,{argProps:b,renderKey:o,val:y,setter:d,columns:s})},o)};return e.jsx("div",{className:"arg-getters",children:r.map(t)})},_=({argProps:n,val:r,setter:m,columns:s,renderKey:t})=>{const[b,o,y,d]=n,S=a=>m(a.target.value);if(y==="enum"&&g.isArray(d))return e.jsxs("fieldset",{children:[e.jsxs("label",{children:[" ",o," "]}),e.jsx("select",{defaultValue:r,onChange:S,children:d.map(a=>e.jsx("option",{value:a,children:a},a))})]},t);if(y==="type")if(d==="integer"){const a=i=>m(parseInt(i.target.value));return e.jsxs("fieldset",{children:[e.jsxs("label",{children:[" ",o," "]}),e.jsx("input",{type:"number",defaultValue:r,step:"1",onChange:a})]},t)}else if(d==="float"){const a=i=>m(parseFloat(i.target.value));return e.jsxs("fieldset",{children:[e.jsxs("label",{children:[" ",o," "]}),e.jsx("input",{type:"number",step:"0.01",defaultValue:r,onChange:a})]},t)}else if(d==="string"){const a=i=>m(i.target.value);return e.jsxs("fieldset",{children:[e.jsxs("label",{children:[" ",o," "]}),e.jsx("input",{type:"text",defaultValue:r,onChange:a})]},t)}else return e.jsxs("fieldset",{children:[e.jsxs("label",{children:[" ",o," "]}),e.jsx("input",{value:"dont know"})]},t);else if(y==="colEnum"){const a=s.map(i=>{const T=p=>{const w=p.target.value;if(g.isString(w)){const A=N(r,i,w);m(k(A,["null"]))}},f=g.get(r,i,"null");return g.isArray(d)?e.jsx("td",{children:e.jsx("select",{defaultValue:f,onChange:T,children:d.map(p=>e.jsx("option",{value:p,children:p},p))})},t+i):e.jsx("h3",{children:" arg error"})});return e.jsx("div",{className:"col-enum",children:e.jsxs("table",{children:[e.jsx("thead",{children:e.jsx("tr",{children:s.map(i=>e.jsx("th",{children:i},i))})}),e.jsx("tbody",{children:e.jsx("tr",{children:a})})]})},t)}else return e.jsx("h3",{children:" unknown argtype "})};h.__docgenInfo={description:"",methods:[],displayName:"OperationDetail",props:{command:{required:!0,tsType:{name:"union",raw:"OperationSingleColumn | OperationSingleArg | OperationTwoArg",elements:[{name:"tuple",raw:"[SymbolT, SymbolDf, string]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]}]},description:""},setCommand:{required:!0,tsType:{name:"signature",type:"function",raw:"(newCommand: Operation) => void",signature:{arguments:[{type:{name:"union",raw:"OperationSingleColumn | OperationSingleArg | OperationTwoArg",elements:[{name:"tuple",raw:"[SymbolT, SymbolDf, string]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]}]},name:"newCommand"}],return:{name:"void"}}},description:""},columns:{required:!0,tsType:{name:"Array",elements:[{name:"string"}],raw:"string[]"},description:""},commandPatterns:{required:!0,tsType:{name:"Record",elements:[{name:"string"},{name:"Array",elements:[{name:"union",raw:"TypeSpec | EnumSpec | ColEnumSpec | NoArgs",elements:[{name:"tuple",raw:'[number, string, "type", "integer" | "float" | "string"]',elements:[{name:"number"},{name:"string"},{name:"literal",value:'"type"'},{name:"union",raw:'"integer" | "float" | "string"',elements:[{name:"literal",value:'"integer"'},{name:"literal",value:'"float"'},{name:"literal",value:'"string"'}]}]},{name:"tuple",raw:'[number, string, "enum", string[]]',elements:[{name:"number"},{name:"string"},{name:"literal",value:'"enum"'},{name:"Array",elements:[{name:"string"}],raw:"string[]"}]},{name:"tuple",raw:'[number, string, "colEnum", string[]]',elements:[{name:"number"},{name:"string"},{name:"literal",value:'"colEnum"'},{name:"Array",elements:[{name:"string"}],raw:"string[]"}]},{name:"null"}]}],raw:"ArgSpec[]"}],raw:"Record<string, ArgSpec[]>"},description:""}}};j.__docgenInfo={description:"",methods:[],displayName:"ArgGetters",props:{command:{required:!0,tsType:{name:"union",raw:"OperationSingleColumn | OperationSingleArg | OperationTwoArg",elements:[{name:"tuple",raw:"[SymbolT, SymbolDf, string]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]}]},description:""},fullPattern:{required:!0,tsType:{name:"Array",elements:[{name:"union",raw:"TypeSpec | EnumSpec | ColEnumSpec",elements:[{name:"tuple",raw:'[number, string, "type", "integer" | "float" | "string"]',elements:[{name:"number"},{name:"string"},{name:"literal",value:'"type"'},{name:"union",raw:'"integer" | "float" | "string"',elements:[{name:"literal",value:'"integer"'},{name:"literal",value:'"float"'},{name:"literal",value:'"string"'}]}]},{name:"tuple",raw:'[number, string, "enum", string[]]',elements:[{name:"number"},{name:"string"},{name:"literal",value:'"enum"'},{name:"Array",elements:[{name:"string"}],raw:"string[]"}]},{name:"tuple",raw:'[number, string, "colEnum", string[]]',elements:[{name:"number"},{name:"string"},{name:"literal",value:'"colEnum"'},{name:"Array",elements:[{name:"string"}],raw:"string[]"}]}]}],raw:"ActualArg[]"},description:""},setCommand:{required:!0,tsType:{name:"signature",type:"function",raw:"(newCommand: Operation) => void",signature:{arguments:[{type:{name:"union",raw:"OperationSingleColumn | OperationSingleArg | OperationTwoArg",elements:[{name:"tuple",raw:"[SymbolT, SymbolDf, string]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]}]},name:"newCommand"}],return:{name:"void"}}},description:""},columns:{required:!0,tsType:{name:"Array",elements:[{name:"string"}],raw:"string[]"},description:""}}};const R=({column:n,addOperationCb:r,defaultArgs:m})=>{const s=t=>()=>{const b=m[t];r(E(b,"col",n))};return e.jsxs("div",{className:"operation-adder",children:[e.jsxs("span",{className:"column-name",children:[" Column: ",n]}),e.jsx("fieldset",{children:g.keys(m).map(t=>e.jsxs("button",{onClick:s(t),children:[" ",t," "]},t))})]})},I=({operations:n,setOperations:r,activeColumn:m,allColumns:s,command_config:t})=>{const b=(u,l)=>l[0].symbol+u.toString(),o=g.map(Array.from(n.entries()),([u,l])=>{const c={};return c[b(u,l)]=l,c}),y=g.merge({},...o),d=g.map(Array.from(n.entries()),([u,l])=>{const c={};return c[b(u,l)]=u,c}),S=g.merge({},...d),[a,i]=O.useState("");function T(u){return l=>{const c=S[u],x=n.map((C,v)=>v===c?l:C);console.log("about to call setOperations",u,l),r(x)}}const f=u=>g.map(Array.from(u.entries()),([l,c])=>c[0].symbol+l.toString()),p=u=>{const l=[...n,u];r(l);const c=f(l)[l.length-1];c!==void 0&&i(c)},{argspecs:w,defaultArgs:A}=t;return e.jsxs("div",{className:"operations-viewer",children:[e.jsx(R,{column:m,addOperationCb:p,defaultArgs:A}),e.jsxs("div",{className:"operations-box",children:[e.jsx("h4",{children:" Operations "}),e.jsx(D,{operations:n,activeKey:a,setActiveKey:i,setOperations:r})]}),a&&e.jsx(h,{command:y[a],setCommand:T(a),columns:s,commandPatterns:w})]})};R.__docgenInfo={description:"",methods:[],displayName:"OperationAdder",props:{column:{required:!0,tsType:{name:"string"},description:""},addOperationCb:{required:!0,tsType:{name:"any"},description:""},defaultArgs:{required:!0,tsType:{name:"any"},description:""}}};I.__docgenInfo={description:"",methods:[],displayName:"OperationViewer",props:{operations:{required:!0,tsType:{name:"Array",elements:[{name:"union",raw:"OperationSingleColumn | OperationSingleArg | OperationTwoArg",elements:[{name:"tuple",raw:"[SymbolT, SymbolDf, string]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]}]}],raw:"Operation[]"},description:""},setOperations:{required:!0,tsType:{name:"signature",type:"function",raw:"(newCommands: Operation[]) => void",signature:{arguments:[{type:{name:"Array",elements:[{name:"union",raw:"OperationSingleColumn | OperationSingleArg | OperationTwoArg",elements:[{name:"tuple",raw:"[SymbolT, SymbolDf, string]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]}]}],raw:"Operation[]"},name:"newCommands"}],return:{name:"void"}}},description:""},activeColumn:{required:!0,tsType:{name:"string"},description:""},allColumns:{required:!0,tsType:{name:"Array",elements:[{name:"string"}],raw:"string[]"},description:""},command_config:{required:!0,tsType:{name:"signature",type:"object",raw:`{
    argspecs: CommandArgSpec;
    defaultArgs: OperationDefaultArgs;
}`,signature:{properties:[{key:"argspecs",value:{name:"Record",elements:[{name:"string"},{name:"Array",elements:[{name:"union",raw:"TypeSpec | EnumSpec | ColEnumSpec | NoArgs",elements:[{name:"tuple",raw:'[number, string, "type", "integer" | "float" | "string"]',elements:[{name:"number"},{name:"string"},{name:"literal",value:'"type"'},{name:"union",raw:'"integer" | "float" | "string"',elements:[{name:"literal",value:'"integer"'},{name:"literal",value:'"float"'},{name:"literal",value:'"string"'}]}]},{name:"tuple",raw:'[number, string, "enum", string[]]',elements:[{name:"number"},{name:"string"},{name:"literal",value:'"enum"'},{name:"Array",elements:[{name:"string"}],raw:"string[]"}]},{name:"tuple",raw:'[number, string, "colEnum", string[]]',elements:[{name:"number"},{name:"string"},{name:"literal",value:'"colEnum"'},{name:"Array",elements:[{name:"string"}],raw:"string[]"}]},{name:"null"}]}],raw:"ArgSpec[]"}],raw:"Record<string, ArgSpec[]>",required:!0}},{key:"defaultArgs",value:{name:"Record",elements:[{name:"string"},{name:"union",raw:"OperationSingleColumn | OperationSingleArg | OperationTwoArg",elements:[{name:"tuple",raw:"[SymbolT, SymbolDf, string]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]},{name:"tuple",raw:"[SymbolT, SymbolDf, string, Atom, Atom]",elements:[{name:"SymbolT"},{name:"SymbolDf"},{name:"string"},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]},{name:"union",raw:"number | string | SymbolT | ColEnumArgs",elements:[{name:"number"},{name:"string"},{name:"SymbolT"},{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}]}]}]}],raw:"Record<string, Operation>",required:!0}}]}},description:""}}};export{I as O};
